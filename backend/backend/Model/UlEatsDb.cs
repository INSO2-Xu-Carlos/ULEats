// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public partial class UlEatsDb : DataConnection
	{
		public UlEatsDb()
		{
			InitSchemas();
			InitDataContext();
		}

		public UlEatsDb(string configuration)
			: base(configuration)
		{
			InitSchemas();
			InitDataContext();
		}

		public UlEatsDb(DataOptions<UlEatsDb> options)
			: base(options.Options)
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		#region Schemas
		public void InitSchemas()
		{
			NeonAuth = new NeonAuthSchema.DataContext(this);
		}

		public NeonAuthSchema.DataContext NeonAuth { get; set; } = null!;
		#endregion

		public ITable<Customer>      Customers      => this.GetTable<Customer>();
		public ITable<Delivery>      Deliveries     => this.GetTable<Delivery>();
		public ITable<OrderItem>     OrderItems     => this.GetTable<OrderItem>();
		public ITable<OrderTracking> OrderTrackings => this.GetTable<OrderTracking>();
		public ITable<Order>         Orders         => this.GetTable<Order>();
		public ITable<Payment>       Payments       => this.GetTable<Payment>();
		public ITable<Product>       Products       => this.GetTable<Product>();
		public ITable<Restaurant>    Restaurants    => this.GetTable<Restaurant>();
		public ITable<User>          Users          => this.GetTable<User>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Customer? Find(this ITable<Customer> table, int customerId)
		{
			return table.FirstOrDefault(e => e.CustomerId == customerId);
		}

		public static Task<Customer?> FindAsync(this ITable<Customer> table, int customerId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerId == customerId, cancellationToken);
		}

		public static Delivery? Find(this ITable<Delivery> table, int deliveryId)
		{
			return table.FirstOrDefault(e => e.DeliveryId == deliveryId);
		}

		public static Task<Delivery?> FindAsync(this ITable<Delivery> table, int deliveryId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DeliveryId == deliveryId, cancellationToken);
		}

		public static OrderItem? Find(this ITable<OrderItem> table, int orderItemId)
		{
			return table.FirstOrDefault(e => e.OrderItemId == orderItemId);
		}

		public static Task<OrderItem?> FindAsync(this ITable<OrderItem> table, int orderItemId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderItemId == orderItemId, cancellationToken);
		}

		public static OrderTracking? Find(this ITable<OrderTracking> table, int trackingId)
		{
			return table.FirstOrDefault(e => e.TrackingId == trackingId);
		}

		public static Task<OrderTracking?> FindAsync(this ITable<OrderTracking> table, int trackingId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TrackingId == trackingId, cancellationToken);
		}

		public static Order? Find(this ITable<Order> table, int orderId)
		{
			return table.FirstOrDefault(e => e.OrderId == orderId);
		}

		public static Task<Order?> FindAsync(this ITable<Order> table, int orderId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId == orderId, cancellationToken);
		}

		public static Payment? Find(this ITable<Payment> table, int paymentId)
		{
			return table.FirstOrDefault(e => e.PaymentId == paymentId);
		}

		public static Task<Payment?> FindAsync(this ITable<Payment> table, int paymentId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PaymentId == paymentId, cancellationToken);
		}

		public static Product? Find(this ITable<Product> table, int productId)
		{
			return table.FirstOrDefault(e => e.ProductId == productId);
		}

		public static Task<Product?> FindAsync(this ITable<Product> table, int productId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ProductId == productId, cancellationToken);
		}

		public static Restaurant? Find(this ITable<Restaurant> table, int restaurantId)
		{
			return table.FirstOrDefault(e => e.RestaurantId == restaurantId);
		}

		public static Task<Restaurant?> FindAsync(this ITable<Restaurant> table, int restaurantId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.RestaurantId == restaurantId, cancellationToken);
		}

		public static User? Find(this ITable<User> table, int userId)
		{
			return table.FirstOrDefault(e => e.UserId == userId);
		}

		public static Task<User?> FindAsync(this ITable<User> table, int userId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserId == userId, cancellationToken);
		}
		#endregion
	}
}
