// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public static partial class NeonAuthSchema
	{
		public partial class DataContext
		{
			private readonly IDataContext _dataContext;

			public ITable<UsersSync> UsersSyncs => _dataContext.GetTable<UsersSync>();

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table("users_sync", Schema = "neon_auth")]
		public class UsersSync
		{
			[Column("raw_json"  , CanBeNull = false                     )] public string          RawJson   { get; set; } = null!; // jsonb
			[Column("id"        , CanBeNull = false, IsPrimaryKey = true)] public string          Id        { get; set; } = null!; // text
			[Column("name"                                              )] public string?         Name      { get; set; } // text
			[Column("email"                                             )] public string?         Email     { get; set; } // text
			[Column("created_at"                                        )] public DateTimeOffset? CreatedAt { get; set; } // timestamp (6) with time zone
			[Column("updated_at"                                        )] public DateTimeOffset? UpdatedAt { get; set; } // timestamp (6) with time zone
			[Column("deleted_at"                                        )] public DateTimeOffset? DeletedAt { get; set; } // timestamp (6) with time zone
		}

		#region Table Extensions
		public static UsersSync? Find(this ITable<UsersSync> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<UsersSync?> FindAsync(this ITable<UsersSync> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
